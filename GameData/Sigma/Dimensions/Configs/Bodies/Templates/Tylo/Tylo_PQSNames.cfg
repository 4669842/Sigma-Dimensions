// VertexSimplexHeightAbsolute
@Kopernicus:HAS[@Body:HAS[@Template[Tylo]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@VertexSimplexHeightAbsolute:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Tylo],@PQS:HAS[@Mods:HAS[@VertexSimplexHeightAbsolute:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@VertexSimplexHeightAbsolute:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@VertexSimplexHeightAbsolute
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!VertexSimplexHeightAbsolute:HAS[#SigmaDimensions[1],#name[_Height]]]
			{
				@VertexSimplexHeightAbsolute
				{
					&name = _Height
				}
			}
			// move processed node to the end
			@Mods
			{
				#VertexSimplexHeightAbsolute {}
				!VertexSimplexHeightAbsolute {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// VertexSimplexHeight
@Kopernicus:HAS[@Body:HAS[@Template[Tylo]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@VertexSimplexHeight:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Tylo],@PQS:HAS[@Mods:HAS[@VertexSimplexHeight:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@VertexSimplexHeight:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@VertexSimplexHeight
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!VertexSimplexHeight:HAS[#SigmaDimensions[1],#name[_Height]]]
			{
				@VertexSimplexHeight
				{
					&name = _Height
				}
			}
			// move processed node to the end
			@Mods
			{
				#VertexSimplexHeight {}
				!VertexSimplexHeight {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// VertexHeightMap
@Kopernicus:HAS[@Body:HAS[@Template[Tylo]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@VertexHeightMap:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Tylo],@PQS:HAS[@Mods:HAS[@VertexHeightMap:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@VertexHeightMap:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@VertexHeightMap
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!VertexHeightMap:HAS[#SigmaDimensions[1],#name[_Height]]]
			{
				@VertexHeightMap
				{
					&name = _Height
				}
			}
			// move processed node to the end
			@Mods
			{
				#VertexHeightMap {}
				!VertexHeightMap {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// FlattenOcean
@Kopernicus:HAS[@Body:HAS[@Template[Tylo]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@FlattenOcean:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Tylo],@PQS:HAS[@Mods:HAS[@FlattenOcean:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@FlattenOcean:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@FlattenOcean
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!FlattenOcean:HAS[#SigmaDimensions[1],#name[_Height]]]
			{
				@FlattenOcean
				{
					&name = _Height
				}
			}
			// move processed node to the end
			@Mods
			{
				#FlattenOcean {}
				!FlattenOcean {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// VertexHeightNoiseVertHeightCurve2
@Kopernicus:HAS[@Body:HAS[@Template[Tylo]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@VertexHeightNoiseVertHeightCurve2:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Tylo],@PQS:HAS[@Mods:HAS[@VertexHeightNoiseVertHeightCurve2:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@VertexHeightNoiseVertHeightCurve2:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@VertexHeightNoiseVertHeightCurve2
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!VertexHeightNoiseVertHeightCurve2:HAS[#SigmaDimensions[1],#name[_Height]]]
			{
				@VertexHeightNoiseVertHeightCurve2
				{
					&name = _Height
				}
			}
			// move processed node to the end
			@Mods
			{
				#VertexHeightNoiseVertHeightCurve2 {}
				!VertexHeightNoiseVertHeightCurve2 {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// AltitudeAlpha
@Kopernicus:HAS[@Body:HAS[@Template[Tylo]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@AltitudeAlpha:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Tylo],@PQS:HAS[@Mods:HAS[@AltitudeAlpha:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@AltitudeAlpha:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@AltitudeAlpha
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!AltitudeAlpha:HAS[#SigmaDimensions[1],#name[_Material_ModProjection]]]
			{
				@AltitudeAlpha
				{
					&name = _Material_ModProjection
				}
			}
			// move processed node to the end
			@Mods
			{
				#AltitudeAlpha {}
				!AltitudeAlpha {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// LandControl
@Kopernicus:HAS[@Body:HAS[@Template[Tylo]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@LandControl:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Tylo],@PQS:HAS[@Mods:HAS[@LandControl:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@LandControl:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@LandControl
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!LandControl:HAS[#SigmaDimensions[1],#name[Scatter]]]
			{
				@LandControl
				{
					&name = Scatter
				}
			}
			// move processed node to the end
			@Mods
			{
				#LandControl {}
				!LandControl {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// MapDecal
@Kopernicus:HAS[@Body:HAS[@Template[Tylo]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@MapDecal:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Tylo],@PQS:HAS[@Mods:HAS[@MapDecal:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@MapDecal:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@MapDecal
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!MapDecal:HAS[#SigmaDimensions[1],#name[Sagan]]]
			{
				@MapDecal
				{
					&name = Sagan
				}
			}
			// move processed node to the end
			@Mods
			{
				#MapDecal {}
				!MapDecal {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}
