// LandControl
@Kopernicus:HAS[@Body:HAS[@Template[Eeloo]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@LandControl:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Eeloo],@PQS:HAS[@Mods:HAS[@LandControl:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@LandControl:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@LandControl
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!LandControl:HAS[#SigmaDimensions[1],#name[_LandClass]]]
			{
				@LandControl
				{
					&name = _LandClass
				}
			}
			// move processed node to the end
			@Mods
			{
				#LandControl {}
				!LandControl {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// AerialPerspectiveMaterial
@Kopernicus:HAS[@Body:HAS[@Template[Eeloo]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@AerialPerspectiveMaterial:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Eeloo],@PQS:HAS[@Mods:HAS[@AerialPerspectiveMaterial:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@AerialPerspectiveMaterial:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@AerialPerspectiveMaterial
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!AerialPerspectiveMaterial:HAS[#SigmaDimensions[1],#name[_Material_AerialPerspective]]]
			{
				@AerialPerspectiveMaterial
				{
					&name = _Material_AerialPerspective
				}
			}
			// move processed node to the end
			@Mods
			{
				#AerialPerspectiveMaterial {}
				!AerialPerspectiveMaterial {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// VertexHeightMap
@Kopernicus:HAS[@Body:HAS[@Template[Eeloo]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@VertexHeightMap:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Eeloo],@PQS:HAS[@Mods:HAS[@VertexHeightMap:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@VertexHeightMap:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@VertexHeightMap
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!VertexHeightMap:HAS[#SigmaDimensions[1],#name[_Height]]]
			{
				@VertexHeightMap
				{
					&name = _Height
				}
			}
			// move processed node to the end
			@Mods
			{
				#VertexHeightMap {}
				!VertexHeightMap {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// VertexSimplexHeight
@Kopernicus:HAS[@Body:HAS[@Template[Eeloo]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@VertexSimplexHeight:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Eeloo],@PQS:HAS[@Mods:HAS[@VertexSimplexHeight:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@VertexSimplexHeight:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@VertexSimplexHeight
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!VertexSimplexHeight:HAS[#SigmaDimensions[1],#name[_HeightNoise]]]
			{
				@VertexSimplexHeight
				{
					&name = _HeightNoise
				}
			}
			// move processed node to the end
			@Mods
			{
				#VertexSimplexHeight {}
				!VertexSimplexHeight {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// VertexHeightNoise
@Kopernicus:HAS[@Body:HAS[@Template[Eeloo]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@VertexHeightNoise:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Eeloo],@PQS:HAS[@Mods:HAS[@VertexHeightNoise:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@VertexHeightNoise:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@VertexHeightNoise
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!VertexHeightNoise:HAS[#SigmaDimensions[1],#name[_HeightNoise]]]
			{
				@VertexHeightNoise
				{
					&name = _HeightNoise
				}
			}
			// move processed node to the end
			@Mods
			{
				#VertexHeightNoise {}
				!VertexHeightNoise {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// VertexVoronoi
@Kopernicus:HAS[@Body:HAS[@Template[Eeloo]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@VertexVoronoi:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Eeloo],@PQS:HAS[@Mods:HAS[@VertexVoronoi:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@VertexVoronoi:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@VertexVoronoi
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!VertexVoronoi:HAS[#SigmaDimensions[1],#name[_HeightNoise]]]
			{
				@VertexVoronoi
				{
					&name = _HeightNoise
				}
			}
			// move processed node to the end
			@Mods
			{
				#VertexVoronoi {}
				!VertexVoronoi {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// FlattenOcean
@Kopernicus:HAS[@Body:HAS[@Template[Eeloo]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@FlattenOcean:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Eeloo],@PQS:HAS[@Mods:HAS[@FlattenOcean:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@FlattenOcean:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@FlattenOcean
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!FlattenOcean:HAS[#SigmaDimensions[1],#name[_HeightNoise]]]
			{
				@FlattenOcean
				{
					&name = _HeightNoise
				}
			}
			// move processed node to the end
			@Mods
			{
				#FlattenOcean {}
				!FlattenOcean {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// VertexHeightNoiseVertHeight
@Kopernicus:HAS[@Body:HAS[@Template[Eeloo]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@VertexHeightNoiseVertHeight:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Eeloo],@PQS:HAS[@Mods:HAS[@VertexHeightNoiseVertHeight:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@VertexHeightNoiseVertHeight:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@VertexHeightNoiseVertHeight
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!VertexHeightNoiseVertHeight:HAS[#SigmaDimensions[1],#name[_FineDetail]]]
			{
				@VertexHeightNoiseVertHeight
				{
					&name = _FineDetail
				}
			}
			// move processed node to the end
			@Mods
			{
				#VertexHeightNoiseVertHeight {}
				!VertexHeightNoiseVertHeight {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}
