// VertexSimplexHeightAbsolute
@Kopernicus:HAS[@Body:HAS[@Template[Kerbin]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@VertexSimplexHeightAbsolute:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Kerbin],@PQS:HAS[@Mods:HAS[@VertexSimplexHeightAbsolute:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@VertexSimplexHeightAbsolute:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@VertexSimplexHeightAbsolute
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!VertexSimplexHeightAbsolute:HAS[#SigmaDimensions[1],#name[_HeightNoise]]]
			{
				@VertexSimplexHeightAbsolute
				{
					&name = _HeightNoise
				}
			}
			// move processed node to the end
			@Mods
			{
				#VertexSimplexHeightAbsolute {}
				!VertexSimplexHeightAbsolute {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// VertexHeightNoiseVertHeightCurve2
@Kopernicus:HAS[@Body:HAS[@Template[Kerbin]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@VertexHeightNoiseVertHeightCurve2:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Kerbin],@PQS:HAS[@Mods:HAS[@VertexHeightNoiseVertHeightCurve2:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@VertexHeightNoiseVertHeightCurve2:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@VertexHeightNoiseVertHeightCurve2
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!VertexHeightNoiseVertHeightCurve2:HAS[#SigmaDimensions[1],#name[_HeightNoise]]]
			{
				@VertexHeightNoiseVertHeightCurve2
				{
					&name = _HeightNoise
				}
			}
			// move processed node to the end
			@Mods
			{
				#VertexHeightNoiseVertHeightCurve2 {}
				!VertexHeightNoiseVertHeightCurve2 {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// VertexRidgedAltitudeCurve
@Kopernicus:HAS[@Body:HAS[@Template[Kerbin]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@VertexRidgedAltitudeCurve:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Kerbin],@PQS:HAS[@Mods:HAS[@VertexRidgedAltitudeCurve:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@VertexRidgedAltitudeCurve:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@VertexRidgedAltitudeCurve
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!VertexRidgedAltitudeCurve:HAS[#SigmaDimensions[1],#name[_HeightNoise]]]
			{
				@VertexRidgedAltitudeCurve
				{
					&name = _HeightNoise
				}
			}
			// move processed node to the end
			@Mods
			{
				#VertexRidgedAltitudeCurve {}
				!VertexRidgedAltitudeCurve {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// LandControl
@Kopernicus:HAS[@Body:HAS[@Template[Kerbin]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@LandControl:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Kerbin],@PQS:HAS[@Mods:HAS[@LandControl:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@LandControl:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@LandControl
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!LandControl:HAS[#SigmaDimensions[1],#name[_LandClassOcean]]]
			{
				@LandControl
				{
					&name = _LandClassOcean
				}
			}
			// move processed node to the end
			@Mods
			{
				#LandControl {}
				!LandControl {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// AerialPerspectiveMaterial
@Kopernicus:HAS[@Body:HAS[@Template[Kerbin]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@AerialPerspectiveMaterial:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Kerbin],@PQS:HAS[@Mods:HAS[@AerialPerspectiveMaterial:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@AerialPerspectiveMaterial:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@AerialPerspectiveMaterial
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!AerialPerspectiveMaterial:HAS[#SigmaDimensions[1],#name[_Material_AerialPerspective]]]
			{
				@AerialPerspectiveMaterial
				{
					&name = _Material_AerialPerspective
				}
			}
			// move processed node to the end
			@Mods
			{
				#AerialPerspectiveMaterial {}
				!AerialPerspectiveMaterial {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// VertexHeightMap
@Kopernicus:HAS[@Body:HAS[@Template[Kerbin]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@VertexHeightMap:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Kerbin],@PQS:HAS[@Mods:HAS[@VertexHeightMap:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@VertexHeightMap:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@VertexHeightMap
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!VertexHeightMap:HAS[#SigmaDimensions[1],#name[_Height]]]
			{
				@VertexHeightMap
				{
					&name = _Height
				}
			}
			// move processed node to the end
			@Mods
			{
				#VertexHeightMap {}
				!VertexHeightMap {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// MapDecalTangent
@Kopernicus:HAS[@Body:HAS[@Template[Kerbin]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@MapDecalTangent:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Kerbin],@PQS:HAS[@Mods:HAS[@MapDecalTangent:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@MapDecalTangent:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@MapDecalTangent
				{
					%SigmaDimensions = 1
				}
			}
			// KSC
			@Mods:HAS[!MapDecalTangent:HAS[#SigmaDimensions[1],#name[KSC]]]
			{
				@MapDecalTangent
				{
					&name = KSC
				}
			}
			// IslandAirfield
			@Mods:HAS[!MapDecalTangent:HAS[#SigmaDimensions[1],#name[IslandAirfield]]]
			{
				@MapDecalTangent
				{
					&name = IslandAirfield
				}
			}
			// move processed node to the end
			@Mods
			{
				#MapDecalTangent {}
				!MapDecalTangent {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// MapDecal
@Kopernicus:HAS[@Body:HAS[@Template[Kerbin]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@MapDecal:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Kerbin],@PQS:HAS[@Mods:HAS[@MapDecal:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@MapDecal:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@MapDecal
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!MapDecal:HAS[#SigmaDimensions[1],#name[KSC2]]]
			{
				@MapDecal
				{
					&name = KSC2
				}
			}
			// move processed node to the end
			@Mods
			{
				#MapDecal {}
				!MapDecal {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// FlattenArea
@Kopernicus:HAS[@Body:HAS[@Template[Kerbin]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@FlattenArea:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Kerbin],@PQS:HAS[@Mods:HAS[@FlattenArea:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@FlattenArea:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@FlattenArea
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!FlattenArea:HAS[#SigmaDimensions[1],#name[Pyramids]]]
			{
				@FlattenArea
				{
					&name = Pyramids
				}
			}
			// move processed node to the end
			@Mods
			{
				#FlattenArea {}
				!FlattenArea {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}
