// VertexSimplexHeightAbsolute
@Kopernicus:HAS[@Body:HAS[@Template[Pol]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@VertexSimplexHeight:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Pol],@PQS:HAS[@Mods:HAS[@VertexSimplexHeight:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@VertexSimplexHeight:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@VertexSimplexHeight
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!VertexSimplexHeight:HAS[#SigmaDimensions[1],#index[0],#name[_Height]]]
			{
				@VertexSimplexHeight
				{
					&name = _Height
					&index = 0
				}
			}
			// Set the name
			@Mods:HAS[!VertexSimplexHeight:HAS[#SigmaDimensions[1],#index[1],#name[_Height]]]
			{
				@VertexSimplexHeight
				{
					&name = _Height
					&index = 1
				}
			}
			// move processed node to the end
			@Mods
			{
				#VertexSimplexHeight {}
				!VertexSimplexHeight {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// VertexHeightNoise
@Kopernicus:HAS[@Body:HAS[@Template[Pol]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@VertexHeightNoise:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Pol],@PQS:HAS[@Mods:HAS[@VertexHeightNoise:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@VertexHeightNoise:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@VertexHeightNoise
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!VertexHeightNoise:HAS[#SigmaDimensions[1],#name[_Height]]]
			{
				@VertexHeightNoise
				{
					&name = _Height
				}
			}
			// move processed node to the end
			@Mods
			{
				#VertexHeightNoise {}
				!VertexHeightNoise {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// FlattenOcean
@Kopernicus:HAS[@Body:HAS[@Template[Pol]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@FlattenOcean:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Pol],@PQS:HAS[@Mods:HAS[@FlattenOcean:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@FlattenOcean:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@FlattenOcean
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!FlattenOcean:HAS[#SigmaDimensions[1],#name[_Height]]]
			{
				@FlattenOcean
				{
					&name = _Height
				}
			}
			// move processed node to the end
			@Mods
			{
				#FlattenOcean {}
				!FlattenOcean {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// VertexHeightOffset
@Kopernicus:HAS[@Body:HAS[@Template[Pol]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@VertexHeightOffset:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Pol],@PQS:HAS[@Mods:HAS[@VertexHeightOffset:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@VertexHeightOffset:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@VertexHeightOffset
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!VertexHeightOffset:HAS[#SigmaDimensions[1],#name[_Height]]]
			{
				@VertexHeightOffset
				{
					&name = _Height
				}
			}
			// move processed node to the end
			@Mods
			{
				#VertexHeightOffset {}
				!VertexHeightOffset {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// AltitudeAlpha
@Kopernicus:HAS[@Body:HAS[@Template[Pol]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@AltitudeAlpha:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Pol],@PQS:HAS[@Mods:HAS[@AltitudeAlpha:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@AltitudeAlpha:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@AltitudeAlpha
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!AltitudeAlpha:HAS[#SigmaDimensions[1],#name[_Material_ModProjection]]]
			{
				@AltitudeAlpha
				{
					&name = _Material_ModProjection
				}
			}
			// move processed node to the end
			@Mods
			{
				#AltitudeAlpha {}
				!AltitudeAlpha {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// LandControl
@Kopernicus:HAS[@Body:HAS[@Template[Pol]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@LandControl:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Pol],@PQS:HAS[@Mods:HAS[@LandControl:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@LandControl:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@LandControl
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!LandControl:HAS[#SigmaDimensions[1],#name[Scatter]]]
			{
				@LandControl
				{
					&name = Scatter
				}
			}
			// move processed node to the end
			@Mods
			{
				#LandControl {}
				!LandControl {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}
