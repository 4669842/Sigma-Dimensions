// VertexHeightMap
@Kopernicus:HAS[@Body:HAS[@Template[Mun]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@VertexHeightMap:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Mun],@PQS:HAS[@Mods:HAS[@VertexHeightMap:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@VertexHeightMap:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@VertexHeightMap
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!VertexHeightMap:HAS[#SigmaDimensions[1],#name[_Height]]]
			{
				@VertexHeightMap
				{
					&name = _Height
				}
			}
			// move processed node to the end
			@Mods
			{
				#VertexHeightMap {}
				!VertexHeightMap {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// AltitudeAlpha
@Kopernicus:HAS[@Body:HAS[@Template[Mun]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@AltitudeAlpha:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Mun],@PQS:HAS[@Mods:HAS[@AltitudeAlpha:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@AltitudeAlpha:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@AltitudeAlpha
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!AltitudeAlpha:HAS[#SigmaDimensions[1],#name[_Material_ModProjection]]]
			{
				@AltitudeAlpha
				{
					&name = _Material_ModProjection
				}
			}
			// move processed node to the end
			@Mods
			{
				#AltitudeAlpha {}
				!AltitudeAlpha {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// LandControl
@Kopernicus:HAS[@Body:HAS[@Template[Mun]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@LandControl:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Mun],@PQS:HAS[@Mods:HAS[@LandControl:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@LandControl:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@LandControl
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!LandControl:HAS[#SigmaDimensions[1],#name[Scatter]]]
			{
				@LandControl
				{
					&name = Scatter
				}
			}
			// move processed node to the end
			@Mods
			{
				#LandControl {}
				!LandControl {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// FlattenArea
@Kopernicus:HAS[@Body:HAS[@Template[Mun]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@FlattenArea:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Mun],@PQS:HAS[@Mods:HAS[@FlattenArea:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@FlattenArea:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@FlattenArea
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!FlattenArea:HAS[#SigmaDimensions[1],#name[Monolith02]]]
			{
				@FlattenArea
				{
					&name = Monolith02
				}
			}
			@Mods:HAS[!FlattenArea:HAS[#SigmaDimensions[1],#name[Monolith01]]]
			{
				@FlattenArea
				{
					&name = Monolith01
				}
			}
			// move processed node to the end
			@Mods
			{
				#FlattenArea {}
				!FlattenArea {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// VertexSimplexHeight
@Kopernicus:HAS[@Body:HAS[@Template[Mun]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@VertexSimplexHeight:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Mun],@PQS:HAS[@Mods:HAS[@VertexSimplexHeight:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@VertexSimplexHeight:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@VertexSimplexHeight
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!VertexSimplexHeight:HAS[#SigmaDimensions[1],#name[_HeightNoise]]]
			{
				@VertexSimplexHeight
				{
					&name = _HeightNoise
				}
			}
			// move processed node to the end
			@Mods
			{
				#VertexSimplexHeight {}
				!VertexSimplexHeight {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// VertexHeightNoiseVertHeight
@Kopernicus:HAS[@Body:HAS[@Template[Mun]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@VertexHeightNoiseVertHeight:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Mun],@PQS:HAS[@Mods:HAS[@VertexHeightNoiseVertHeight:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@VertexHeightNoiseVertHeight:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@VertexHeightNoiseVertHeight
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!VertexHeightNoiseVertHeight:HAS[#SigmaDimensions[1],#name[_HeightNoise]]]
			{
				@VertexHeightNoiseVertHeight
				{
					&name = _HeightNoise
				}
			}
			// move processed node to the end
			@Mods
			{
				#VertexHeightNoiseVertHeight {}
				!VertexHeightNoiseVertHeight {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}

// VoronoiCraters
@Kopernicus:HAS[@Body:HAS[@Template[Mun]:HAS[~removeAllPQSMods[True]],@PQS:HAS[@Mods:HAS[@VoronoiCraters:HAS[~SigmaDimensions[1]]]]]]:FOR[SigDim]
{
	@Body:HAS[@Template[Mun],@PQS:HAS[@Mods:HAS[@VoronoiCraters:HAS[~SigmaDimensions[1]]]]]
	{
		@PQS:HAS[@Mods:HAS[@VoronoiCraters:HAS[~SigmaDimensions[1]]]]
		{
			// process first node
			@Mods
			{
				@VoronoiCraters
				{
					%SigmaDimensions = 1
				}
			}
			// Set the name
			@Mods:HAS[!VoronoiCraters:HAS[#SigmaDimensions[1],#index[0],#name[_HeightNoise]]]
			{
				@VoronoiCraters
				{
					&name = _HeightNoise
					&index = 0
				}
			}
			// Set the name
			@Mods:HAS[!VoronoiCraters:HAS[#SigmaDimensions[1],#index[1],#name[_HeightNoise]]]
			{
				@VoronoiCraters
				{
					&name = _HeightNoise
					&index = 1
				}
			}
			// move processed node to the end
			@Mods
			{
				#VoronoiCraters {}
				!VoronoiCraters {}
			}
			// repeat untill all nodes have been processed
		}
	}
	MM_PATCH_LOOP {}
}
